// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven { url "http://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0"
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2"
		classpath "org.springframework.build.gradle:propdeps-plugin:0.0.6"
	}
}

apply plugin: "propdeps"
apply plugin: "java"
apply plugin: "license"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

defaultTasks "clean", "build"

// ======== deployment options (dispatched on group name) ========
group = "jp.xet"
version = "0.3-SNAPSHOT"

sourceCompatibility = targetCompatibility = 1.8

ext {
	artifactId = "spar-wings"
	defaultEncoding = "UTF-8"
}

// ======== create source and javadoc bundles ========
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

javadoc {
	failOnError = false
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations {
	deployerJars
}

publishing {
	publications {
		mavenStuff(MavenPublication) {
			from components.java

			artifact sourcesJar {
				classifier "sources"
			}

			artifact javadocJar {
				classifier "javadoc"
			}
		}
	}
}


// ======== deployment options ========

uploadArchives {
	repositories {
		mavenDeployer {
			assert project.hasProperty("awsAccessKey") && project.hasProperty("awsSecretKey"): "AWS credential is required"
			def awsCredentials = [
				userName: awsAccessKey,
				passphrase: awsSecretKey
			]

			configuration = configurations.deployerJars
			repository(url: "s3://maven.xet.jp/release") {
				authentication(awsCredentials)
			}
			snapshotRepository(url: "s3://maven.xet.jp/snapshot") {
				authentication(awsCredentials)
			}
		}
	}
}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
	pom.project {
		inceptionYear "2015"
		packaging "jar"
		licenses {
			license {
				name "The Apache Software License, Version 2.0"
				url "http://www.apache.org/licenses/LICENSE-2.0.txt"
				distribution "repo"
			}
		}
	}
}

bintray {
	user = bintrayUser
	key = bintrayApiKey

	publications = ["mavenStuff"]
	pkg {
		repo = "maven"
		name = artifactId
		desc = "AWS and Spring framework commons."
		websiteUrl = "https://github.com/dai0304/spar-wings"
		issueTrackerUrl = "https://github.com/dai0304/spar-wings/issues"
		vcsUrl = "https://github.com/dai0304/spar-wings.git"
		licenses = ["Apache-2.0"]
		labels = ["AWS", "Spring framework"]
	}
}

//======== library versions ========
ext {
	springVersion = "4.1.7.RELEASE"
	springRetryVersion = "1.1.2.RELEASE"
	awsJavaSdkVersion = "1.10.+"
	
	// test
	junitVersion = "4.11"
	hamcrestVersion = "1.3"
	mockitoCoreVersion = "1.9.5"
}
repositories {
	mavenCentral()
	maven { url "http://maven.xet.jp/release" } // for baseunits
}
dependencies {
	compile "org.projectlombok:lombok:1.16.2"
	compile "org.slf4j:slf4j-api:1.7.12"
	optional "com.google.guava:guava:18.0"
	optional "jp.xet:baseunits:2.13"
	optional "javax.servlet:javax.servlet-api:3.1.0"
	
	optional "javax.json:javax.json-api:1.0"
	optional "org.glassfish:javax.json:1.0.4"
	
	optional "com.amazonaws:aws-java-sdk-dynamodb:$awsJavaSdkVersion"
	optional "com.amazonaws:aws-java-sdk-sns:$awsJavaSdkVersion"
	
	optional "org.springframework:spring-web:$springVersion"
	optional "org.springframework:spring-webmvc:$springVersion"
	optional "org.springframework.security:spring-security-core:3.2.5.RELEASE"
	optional "org.springframework.retry:spring-retry:$springRetryVersion"
	
	optional "org.springframework.boot:spring-boot-autoconfigure:1.2.5.RELEASE"
	
	deployerJars "org.springframework.build:aws-maven:4.7.0.RELEASE"
	
	testCompile "junit:junit:$junitVersion"
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"
}

// ======== wrapper ========
task wrapper(type: Wrapper) {
	gradleVersion = "2.5"
}

// ======== License =======
license {
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	header file("copyright/HEADER")
	strictCheck true
	mapping {
		java = "SLASHSTAR_STYLE"
	}
}

